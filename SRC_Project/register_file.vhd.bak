library ieee;
use ieee.std_logic_1164.all;

entity register_file is
  port (
    clock   : in    std_logic;          
    reset   : in    std_logic;          
    cpu_bus : inout std_logic_vector(31 downto 0);  
    ra      : in    std_logic_vector(4 downto 0);  
    rb      : in    std_logic_vector(4 downto 0);  
    rc      : in    std_logic_vector(4 downto 0);  
    g_ra    : in    std_logic;          
    g_rb    : in    std_logic;          
    g_rc    : in    std_logic;          
    r_in    : in    std_logic;          
    r_out   : in    std_logic;          
    ba_out  : in    std_logic           
    );
end register_file;

architecture register_file_arch of register_file is

component D_Flip_Flop_load_32 is
  port (
    clock : in  std_logic;          
    reset : in  std_logic;            
    d     : in  std_logic_vector(31 downto 0); 
    q     : out std_logic_vector(31 downto 0); 
    load  : in  std_logic             
);
end component; 

component decoder_5to32 is
  port (
    input  : in  std_logic_vector(4  downto 0);           
    output : out std_logic_vector(31 downto 0)               
    );
end component;

component Buffer_32 is
  port (
    input  : in  std_logic_vector(31 downto 0);  
    output : out std_logic_vector(31 downto 0); 
    enable : in  std_logic             
    );
end component;

signal ra_out,
		 rb_out,
		 rc_out,
		 select_reg: std_logic_vector(4 downto 0);

signal decoder_out : std_logic_vector(31 downto 0);
signal inbuffRo : std_logic_vector(31 downto 0);

signal Rout_BAout_sig : std_logic;
signal and_sig_r0 	 : std_logic;
signal notBaout 	    : std_logic;

signal R0_out_buf, R1_out_buf, R2_out_buf, R3_out_buf,
		 R4_out_buf, R5_out_buf, R6_out_buf, R7_out_buf,
		 R8_out_buf, R9_out_buf, R10_out_buf,R11_out_buf,
		 R12_out_buf,R13_out_buf,R14_out_buf,R15_out_buf,
		 R16_out_buf,R17_out_buf,R18_out_buf,R19_out_buf,
		 R20_out_buf,R21_out_buf,R22_out_buf,R23_out_buf,
		 R24_out_buf,R25_out_buf,R26_out_buf,R27_out_buf,
		 R28_out_buf,R29_out_buf,R30_out_buf,R31_out_buf
		 : std_logic_vector(31 downto 0);
		 
signal load0, load1, load2, load3, load4, load5, load6, load7,
		 load8, load9, load10,load11,load12,load13,load14,load15,
		 load16,load17,load18,load19,load20,load21,load22,load23,
		 load24,load25,load26,load27,load28,load29,load30,load31 
		 : std_logic;
		 
signal bufE1, bufE2, bufE3, bufE4, bufE5, bufE6, bufE7, bufE8,
		 bufE9, bufE10, bufE11,bufE12,bufE13,bufE14,bufE15,bufE16,
		 bufE17,bufE18,bufE19,bufE20,bufE21,bufE22,bufE23,bufE24,
		 bufE25,bufE26,bufE27,bufE28,bufE29,bufE30,bufE31
		 : std_logic;
	
begin  

ra_out <= ra and ("0000" & g_ra);
rb_out <= rb and ("0000" & g_rb);
rc_out <= rc and ("0000" & g_rc);

select_reg <= ra_out or rb_out or rc_out;

dec: decoder_5to32 port map (select_reg, decoder_out);

load0  <= (r_in and decoder_out(0));
load1  <= (r_in and decoder_out(1));
load2  <= (r_in and decoder_out(2));
load3  <= (r_in and decoder_out(3));
load4  <= (r_in and decoder_out(4));
load5  <= (r_in and decoder_out(5));
load6  <= (r_in and decoder_out(6));
load7  <= (r_in and decoder_out(7));
load8  <= (r_in and decoder_out(8));
load9  <= (r_in and decoder_out(9));
load10 <= (r_in and decoder_out(10));
load11 <= (r_in and decoder_out(11));
load12 <= (r_in and decoder_out(12));
load13 <= (r_in and decoder_out(13));
load14 <= (r_in and decoder_out(14));
load15 <= (r_in and decoder_out(15));
load16 <= (r_in and decoder_out(16));
load17 <= (r_in and decoder_out(17));
load18 <= (r_in and decoder_out(18));
load19 <= (r_in and decoder_out(19));
load20 <= (r_in and decoder_out(20));
load21 <= (r_in and decoder_out(21));
load22 <= (r_in and decoder_out(22));
load23 <= (r_in and decoder_out(23));
load24 <= (r_in and decoder_out(24));
load25 <= (r_in and decoder_out(25));
load26 <= (r_in and decoder_out(26));
load27 <= (r_in and decoder_out(27));
load28 <= (r_in and decoder_out(28));
load29 <= (r_in and decoder_out(29));
load30 <= (r_in and decoder_out(30));
load31 <= (r_in and decoder_out(31));

-- for calculate displeasment
R0:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R0_out_buf, load0);

R1:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R1_out_buf,  load1);
R2:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R2_out_buf,  load2);
R3:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R3_out_buf,  load3);
R4:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R4_out_buf,  load4);
R5:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R5_out_buf,  load5);
R6:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus, R6_out_buf,  load6);
R7:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R7_out_buf,  load7);
R8:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R8_out_buf,  load8);
R9:  D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R9_out_buf,  load9);
R10: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R10_out_buf, load10);
R11: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R11_out_buf, load11);
R12: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R12_out_buf, load12);
R13: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R13_out_buf, load13);
R14: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R14_out_buf, load14);
R15: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R15_out_buf, load15);
R16: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R16_out_buf, load16);
R17: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R17_out_buf, load17);
R18: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R18_out_buf, load18);
R19: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R19_out_buf, load19);
R20: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R20_out_buf, load20);
R21: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R21_out_buf, load21);
R22: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R22_out_buf, load22);
R23: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R23_out_buf, load23);
R24: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R24_out_buf, load24);
R25: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R25_out_buf, load25);
R26: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R26_out_buf, load26);
R27: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R27_out_buf, load27);
R28: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R28_out_buf, load28);
R29: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R29_out_buf, load29);
R30: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R30_out_buf, load30);
R31: D_Flip_Flop_load_32 port map (clock, reset, cpu_bus ,R31_out_buf, load31);

Rout_BAout_sig <= r_out or ba_out;
and_sig_r0     <= Rout_BAout_sig and decoder_out(0);

notBaout 		<= not ba_out;
inbuffRo 		<= ("000000000000000000000000000000" & notBaout) and R0_out_buf;

buf0:  Buffer_32 port map (inbuffRo,cpu_bus,and_sig_r0);

bufE1  <= (decoder_out(1)  and Rout_BAout_sig);
bufE2  <= (decoder_out(2)  and Rout_BAout_sig);
bufE3  <= (decoder_out(3)  and Rout_BAout_sig);
bufE4  <= (decoder_out(4)  and Rout_BAout_sig);
bufE5  <= (decoder_out(5)  and Rout_BAout_sig);
bufE6  <= (decoder_out(6)  and Rout_BAout_sig);
bufE7  <= (decoder_out(7)  and Rout_BAout_sig);
bufE8  <= (decoder_out(8)  and Rout_BAout_sig);
bufE9  <= (decoder_out(9)  and Rout_BAout_sig);
bufE10 <= (decoder_out(10)  and Rout_BAout_sig);
bufE11 <= (decoder_out(11)  and Rout_BAout_sig);
bufE12 <= (decoder_out(12)  and Rout_BAout_sig);
bufE13 <= (decoder_out(13)  and Rout_BAout_sig);
bufE14 <= (decoder_out(14)  and Rout_BAout_sig);
bufE15 <= (decoder_out(15)  and Rout_BAout_sig);
bufE16 <= (decoder_out(16)  and Rout_BAout_sig);
bufE17 <= (decoder_out(17)  and Rout_BAout_sig);
bufE18 <= (decoder_out(18)  and Rout_BAout_sig);
bufE19 <= (decoder_out(19)  and Rout_BAout_sig);
bufE20 <= (decoder_out(20)  and Rout_BAout_sig);
bufE21 <= (decoder_out(21)  and Rout_BAout_sig);
bufE22 <= (decoder_out(22)  and Rout_BAout_sig);
bufE23 <= (decoder_out(23)  and Rout_BAout_sig);
bufE24 <= (decoder_out(24)  and Rout_BAout_sig);
bufE25 <= (decoder_out(25)  and Rout_BAout_sig);
bufE26 <= (decoder_out(26)  and Rout_BAout_sig);
bufE27 <= (decoder_out(27)  and Rout_BAout_sig);
bufE28 <= (decoder_out(28)  and Rout_BAout_sig);
bufE29 <= (decoder_out(29)  and Rout_BAout_sig);
bufE30 <= (decoder_out(30)  and Rout_BAout_sig);
bufE31 <= (decoder_out(31)  and Rout_BAout_sig);


buf1:  Buffer_32 port map (R1_out_buf,  cpu_bus, bufE1);
buf2:  Buffer_32 port map (R2_out_buf,  cpu_bus, bufE2);
buf3:  Buffer_32 port map (R3_out_buf,  cpu_bus, bufE3);
buf4:  Buffer_32 port map (R4_out_buf,  cpu_bus, bufE4);
buf5:  Buffer_32 port map (R5_out_buf,  cpu_bus, bufE5);
buf6:  Buffer_32 port map (R6_out_buf,  cpu_bus, bufE6);
buf7:  Buffer_32 port map (R7_out_buf,  cpu_bus, bufE7);
buf8:  Buffer_32 port map (R8_out_buf,  cpu_bus, bufE8);
buf9:  Buffer_32 port map (R9_out_buf,  cpu_bus, bufE9);
buf10: Buffer_32 port map (R10_out_buf, cpu_bus, bufE10);
buf11: Buffer_32 port map (R11_out_buf, cpu_bus, bufE11);
buf12: Buffer_32 port map (R12_out_buf, cpu_bus, bufE12);
buf13: Buffer_32 port map (R13_out_buf, cpu_bus, bufE13);
buf14: Buffer_32 port map (R14_out_buf, cpu_bus, bufE14);
buf15: Buffer_32 port map (R15_out_buf, cpu_bus, bufE15);
buf16: Buffer_32 port map (R16_out_buf, cpu_bus, bufE16);
buf17: Buffer_32 port map (R17_out_buf, cpu_bus, bufE17);
buf18: Buffer_32 port map (R18_out_buf, cpu_bus, bufE18);
buf19: Buffer_32 port map (R19_out_buf, cpu_bus, bufE19);
buf20: Buffer_32 port map (R20_out_buf, cpu_bus, bufE20);
buf21: Buffer_32 port map (R21_out_buf, cpu_bus, bufE21);
buf22: Buffer_32 port map (R22_out_buf, cpu_bus, bufE22);
buf23: Buffer_32 port map (R23_out_buf, cpu_bus, bufE23);
buf24: Buffer_32 port map (R24_out_buf, cpu_bus, bufE24);
buf25: Buffer_32 port map (R25_out_buf, cpu_bus, bufE25);
buf26: Buffer_32 port map (R26_out_buf, cpu_bus, bufE26);
buf27: Buffer_32 port map (R27_out_buf, cpu_bus, bufE27);
buf28: Buffer_32 port map (R28_out_buf, cpu_bus, bufE28);
buf29: Buffer_32 port map (R29_out_buf, cpu_bus, bufE29);
buf30: Buffer_32 port map (R30_out_buf, cpu_bus, bufE30);
buf31: Buffer_32 port map (R31_out_buf, cpu_bus, bufE31);
  
end register_file_arch;
