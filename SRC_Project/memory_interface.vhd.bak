library IEEE;
use IEEE.std_logic_1164.all;

entity memory_interface is
  port(
    clock    : in    std_logic;        
    reset    : in    std_logic;        
    cpu_bus  : inout std_logic_vector(31 downto 0);  
    ma       : out   std_logic_vector(31 downto 0);  
    md       : inout std_logic_vector(31 downto 0);  
    ma_in    : in    std_logic;         
    md_bus   : in    std_logic;         
    md_read  : in    std_logic;         
    md_write : in    std_logic;         
    md_out   : in    std_logic         
    );
end memory_interface;

architecture rtl of memory_interface is

  component D_Flip_Flop_load_32
    port (
      clock : in  std_logic;
      reset : in  std_logic;
      d     : in  std_logic_vector(31 downto 0);
      q     : out std_logic_vector(31 downto 0);
      load  : in  std_logic
      );
  end component;
  
  component Buffer_32
    port (
      input  : in  std_logic_vector(31 downto 0);
      output : out std_logic_vector(31 downto 0);
      enable : in  std_logic
      );
  end component;
  
  signal or_G : std_logic_vector(31 downto 0);
  signal q : std_logic_vector(31 downto 0);
  signal md_in : std_logic;
begin  


  data_select: process (cpu_bus, md, md_bus, md_read)
  begin 
    for i in 0 to 31 loop
      or_G(i) <= (cpu_bus(i) and md_bus) or (md(i) and md_read);
    end loop;
  end process data_select;


  md_in <= md_bus or md_read;
  md_r : D_Flip_Flop_load_32 port map ( clock, reset, or_G, q, md_in );
  buff1 : Buffer_32 port map ( q, cpu_bus, md_out );
  buff2 : Buffer_32 port map ( q, md, md_write );
  
  ma_r : D_Flip_Flop_load_32 port map ( clock, reset, cpu_bus, ma, ma_in );
end rtl;